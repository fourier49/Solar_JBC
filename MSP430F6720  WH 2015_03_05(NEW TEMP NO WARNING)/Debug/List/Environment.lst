###############################################################################
#                                                                             #
#                                                       26/Jan/2015  15:35:08 #
# IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430         #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  C:\Users\LIN\Desktop\MSP430F6720  WH                    #
#                     2015_01_26\source\App\Environment.c                     #
#    Command line  =  "C:\Users\LIN\Desktop\MSP430F6720  WH                   #
#                     2015_01_26\source\App\Environment.c" -lcN               #
#                     "C:\Users\LIN\Desktop\MSP430F6720  WH                   #
#                     2015_01_26\Debug\List\" -o                              #
#                     "C:\Users\LIN\Desktop\MSP430F6720  WH                   #
#                     2015_01_26\Debug\Obj\" --no_cse --no_unroll             #
#                     --no_inline --no_code_motion --no_tbaa --debug          #
#                     -D__MSP430F6720__ -e --double=32 --dlib_config          #
#                     "C:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.4 Evaluation\430\LIB\DLIB\dl430xsfn.h" -I             #
#                     "C:\Users\LIN\Desktop\MSP430F6720  WH                   #
#                     2015_01_26/source/inc\" -I                              #
#                     "C:\Users\LIN\Desktop\MSP430F6720  WH 2015_01_26/.\"    #
#                     --core=430X --data_model=small -Ol --multiplier=32      #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\LIN\Desktop\MSP430F6720  WH                    #
#                     2015_01_26\Debug\List\Environment.lst                   #
#    Object file   =  C:\Users\LIN\Desktop\MSP430F6720  WH                    #
#                     2015_01_26\Debug\Obj\Environment.r43                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\LIN\Desktop\MSP430F6720  WH 2015_01_26\source\App\Environment.c
      1          #include <stdio.h>
      2          #include <string.h>
      3          /* Application include files. */	
      4          #include "configuration.h"
      5          #include "Environment.h"
      6          #include "Environment_global.h"
      7          int Get_EvnString(void)
      8          {
      9          	char* ptr ;
     10          	int stringCount=0;
     11          	char StringBuf[10][50];
     12          	char TempBuf[100];
     13          	int tempbufindex=0;
     14          	int retConut=0;
     15          	char* parserStart;
     16          	int i;
     17          
     18          	ptr=(char*)EnvStartAdd;
     19          	memset(StringBuf,0,sizeof(StringBuf));
     20          
     21          	while(retConut<ContiRetCount && tempbufindex<40)
     22          	{
     23          
     24          		if(*ptr==0x0d && *(ptr+1)==0x0a)
     25          		{
     26          			TempBuf[tempbufindex]=0;
     27          			strcpy(StringBuf[stringCount],TempBuf);
     28          			stringCount+=1;
     29          			tempbufindex=0;
     30          			retConut=0;
     31          			ptr++;
     32          		}
     33          		else
     34          		{
     35          			if(*ptr==0xff)
     36          			{
     37          				retConut++;
     38          			}
     39          			TempBuf[tempbufindex++]=*ptr;
     40          
     41          		}
     42          
     43          		ptr++;
     44          
     45          
     46          	}
     47          
     48          	for( i=0;i<stringCount;i++)
     49          	{
     50          		if((parserStart=strstr(StringBuf[i],"MAC=")))
     51          		{
     52          			SaveMac2Evn(parserStart+strlen("MAC="));
     53          		}
     54          
     55          		if((parserStart=strstr(StringBuf[i],"SN=")))
     56          		{
     57          			SaveSNEvn(parserStart+strlen("SN="));
     58          		}
     59          
     60          	}
     61          
     62          
     63          	return stringCount;
     64          }
     65          
     66          int SaveMac2Evn(char*Start)
     67          {
     68          		uint8_t RetHex[1];
     69          
     70          
     71          		G_ENVCONFIG.Mac[0]=*hex_decode(Start,2,RetHex);
     72          		Start=strstr(Start,":")+1;
     73          		G_ENVCONFIG.Mac[1]=*hex_decode(Start,2,RetHex);
     74          		Start=strstr(Start,":")+1;
     75          		G_ENVCONFIG.Mac[2]=*hex_decode(Start,2,RetHex);
     76          		Start=strstr(Start,":")+1;
     77          		G_ENVCONFIG.Mac[3]=*hex_decode(Start,2,RetHex);
     78          		Start=strstr(Start,":")+1;
     79          		G_ENVCONFIG.Mac[4]=*hex_decode(Start,2,RetHex);
     80          		Start=strstr(Start,":")+1;
     81          		G_ENVCONFIG.Mac[5]=*hex_decode(Start,2,RetHex);
     82          
     83          		return 0;
     84          }
     85          
     86          int SaveSNEvn(char*Start)
     87          {
     88          		int i=0;
     89          		G_ENVCONFIG.SeriesNumber[0]=*(Start+i++)-0x30;
     90          		G_ENVCONFIG.SeriesNumber[1]=*(Start+i++)-0x30;
     91          		G_ENVCONFIG.SeriesNumber[2]=*(Start+i++)-0x30;
     92          		G_ENVCONFIG.SeriesNumber[3]=*(Start+i++)-0x30;
     93          		G_ENVCONFIG.SeriesNumber[4]=*(Start+i++)-0x30;
     94          		G_ENVCONFIG.SeriesNumber[5]=*(Start+i++)-0x30;
     95          		G_ENVCONFIG.SeriesNumber[6]=*(Start+i++)-0x30;
     96          		G_ENVCONFIG.SeriesNumber[7]=*(Start+i++)-0x30;
     97          
     98          
     99          		return 0;
    100          }
    101          
    102          uint8_t* hex_decode(char *in, size_t len, uint8_t *out)
    103          {
    104              unsigned int i, t, hn, ln;
    105          
    106              for (t = 0,i = 0; i < len; i+=2,++t) {
    107          
    108                      hn = in[i] > '9' ? (in[i]|32) - 'a' + 10 : in[i] - '0';
    109                      ln = in[i+1] > '9' ? (in[i+1]|32) - 'a' + 10 : in[i+1] - '0';
    110          
    111                      out[t] = (hn << 4 ) | ln;
    112          
    113              }
    114              return out;
    115          
    116          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     612  Get_EvnString
            612 -> SaveMac2Evn
            612 -> SaveSNEvn
            612 -> memset
            612 -> strcpy
            612 -> strstr
       8  SaveMac2Evn
              8 -> hex_decode
              8 -> strstr
       4  SaveSNEvn
      12  hex_decode
       4  strstr
              4 -> __iar_Strstr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant ":">
       5  ?<Constant "MAC=">
       4  ?<Constant "SN=">
      14  G_ENVCONFIG
     230  Get_EvnString
     180  SaveMac2Evn
     132  SaveSNEvn
     126  hex_decode
       4  strstr

 
 672 bytes in segment CODE
  11 bytes in segment DATA16_C
  14 bytes in segment DATA16_Z
 
 668 bytes of CODE  memory (+ 4 bytes shared)
  11 bytes of CONST memory
  14 bytes of DATA  memory

Errors: none
Warnings: none
